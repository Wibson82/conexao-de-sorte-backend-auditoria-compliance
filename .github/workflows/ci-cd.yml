name: "üìä Auditoria Compliance ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PAR√ÇMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: auditoria-compliance
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOB 1 ‚ñ∏ VALIDA√á√ÉO DO WORKSPACE
# ----------------------------------------------------------------------

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python para valida√ß√£o YAML (scripts)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar depend√™ncias para valida√ß√£o YAML (pyyaml)
        run: pip install --upgrade pip pyyaml

      - name: "Guard: validar configura√ß√µes obrigat√≥rias (microservice)"
        shell: bash
        run: |
          chmod +x .github/workflows/scripts/validate-required-files.sh
          ./.github/workflows/scripts/validate-required-files.sh microservice auditoria-compliance

      - name: "Guard: proibir r2dbc:h2 fora de testes"
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.yaml' --include='*.properties' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "‚ùå r2dbc:h2 encontrado fora de src/test" >&2
            echo "$FOUND" >&2
            exit 1
          fi

      - name: "Guard: depend√™ncia H2 n√£o‚Äëtest"
        shell: bash
        run: |
          ./mvnw -q dependency:list -DincludeScope=compile -DoutputFile=deps.txt
          if grep -E "com.h2database:h2|io.r2dbc:r2dbc-h2" deps.txt; then
            echo "‚ùå H2 presente em scope de produ√ß√£o" >&2
            exit 1
          fi


# ----------------------------------------------------------------------
# JOB 2 ‚ñ∏ BUILD + TEST + SAST/SCA
# ----------------------------------------------------------------------

  build-test-scan:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven

      # Valida√ß√µes de YAML e Docker Compose s√£o cobertas por
      # ./.github/workflows/scripts/validate-required-files.sh no job anterior

      - name: Build + Test + Package
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          if [ -n "${NVD_API_KEY:-}" ]; then
            echo "‚úÖ NVD API Key configurada - varredura ser√° acelerada"
            export MAVEN_OPTS="$MAVEN_OPTS -DnvdApiKey=$NVD_API_KEY"
          else
            echo "‚ö†Ô∏è NVD API Key n√£o configurada - varredura pode ser lenta"
          fi
          ./mvnw -B clean compile test package

      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: auditoria-compliance-jar
          path: target/conexao-auditoria-compliance-*.jar
          retention-days: 1

      - name: Upload configura√ß√µes para deploy
        uses: actions/upload-artifact@v4
        with:
          name: auditoria-compliance-configs
          path: |
            docker-compose.yml
            Dockerfile
          retention-days: 1

# ----------------------------------------------------------------------
# JOB 3 ‚ñ∏ AN√ÅLISE DE SEGURAN√áA
# ----------------------------------------------------------------------

  security-analysis:
    needs: build-test-scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Verificar score de seguran√ßa (microservice)
        run: |
          chmod +x .github/workflows/scripts/security-analysis.sh
          ./.github/workflows/scripts/security-analysis.sh microservice 4 auditoria-compliance
# ----------------------------------------------------------------------
# JOB 3 ‚ñ∏ BUILD DA IMAGEM + PUSH GHCR
# ----------------------------------------------------------------------

  build-image:
    needs: [build-test-scan, security-analysis]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image-uri: ${{ steps.build-and-push.outputs.image-uri }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artefact
        uses: actions/download-artifact@v4
        with:
          name: auditoria-compliance-jar
          path: target

      - name: Download configura√ß√µes
        uses: actions/download-artifact@v4
        with:
          name: auditoria-compliance-configs
          path: .

      # ‚îÄ‚îÄ‚îÄ Login no GHCR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        id: build-and-push
        run: |
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TIMESTAMP=$(date +'%d-%m-%Y-%H-%M')
          IMAGE_URI="ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-auditoria-compliance:${TIMESTAMP}"

          echo "üèóÔ∏è Building and pushing Auditoria/Compliance to ${IMAGE_URI}"

          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag "${IMAGE_URI}" \
            --tag "ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-auditoria-compliance:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "‚úÖ Image built and pushed successfully"

# ----------------------------------------------------------------------
# JOB 4 ‚ñ∏ DEPLOY SELF‚ÄëHOSTED (Docker Swarm + secrets)
# ----------------------------------------------------------------------

  deploy-selfhosted:
    needs: build-image
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-auditoria-compliance ]
    timeout-minutes: 8
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Login GHCR (Self-hosted)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull imagem do GHCR
        run: docker pull "${{ needs.build-image.outputs.image-uri }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Sincronizar Azure Key Vault ‚Üí Docker Secrets (padronizado)
        shell: bash
        run: |
          set -euo pipefail
          chmod +x .github/workflows/scripts/sync-azure-keyvault-secrets.sh
          VAULT_NAME="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          ./.github/workflows/scripts/sync-azure-keyvault-secrets.sh "$VAULT_NAME" "auditoria-compliance"

      - name: Carregar vari√°veis de ambiente a partir do Key Vault
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          get_secret() { az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv 2>/dev/null || true; }
          REDIS_HOST=$(get_secret "conexao-de-sorte-redis-host"); echo "REDIS_HOST=${REDIS_HOST:-}" >> $GITHUB_ENV
          REDIS_PORT=$(get_secret "conexao-de-sorte-redis-port"); echo "REDIS_PORT=${REDIS_PORT:-6379}" >> $GITHUB_ENV
          REDIS_PASSWORD=$(get_secret "conexao-de-sorte-redis-password"); echo "REDIS_PASSWORD=${REDIS_PASSWORD:-}" >> $GITHUB_ENV
          REDIS_DATABASE=$(get_secret "conexao-de-sorte-redis-database"); echo "REDIS_DATABASE=${REDIS_DATABASE:-1}" >> $GITHUB_ENV
          JWT_ISSUER=$(get_secret "conexao-de-sorte-jwt-issuer"); echo "JWT_ISSUER=${JWT_ISSUER:-}" >> $GITHUB_ENV
          CORS_ALLOWED_ORIGINS=$(get_secret "conexao-de-sorte-cors-allowed-origins"); echo "CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-}" >> $GITHUB_ENV
          CORS_ALLOW_CREDENTIALS=$(get_secret "conexao-de-sorte-cors-allow-credentials"); echo "CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}" >> $GITHUB_ENV

      - name: üßπ Cleanup existing deployment
        run: |
          # Remove stack existente se houver
          docker stack rm conexao-auditoria-compliance 2>/dev/null || true
          
          # Aguardar limpeza completa
          echo "‚è≥ Aguardando limpeza completa..."
          sleep 15
          
          # Limpar containers √≥rf√£os do servi√ßo auditoria-compliance
          docker container ls -q --filter "name=auditoria-compliance" | xargs -r docker stop
          docker container ls -aq --filter "name=auditoria-compliance" | xargs -r docker rm
          
          echo "‚úÖ Limpeza conclu√≠da"

      - name: Deploy via docker service (update/create)
        run: |
          set -euo pipefail
          IMAGE="${{ needs.build-image.outputs.image-uri }}"
          SERVICE_NAME="${{ env.SERVICE_NAME }}"
          PORT=8096
          NETWORK_NAME="conexao-network-swarm"

          # Criar rede se n√£o existir
          docker network create --driver overlay "$NETWORK_NAME" 2>/dev/null || true

          echo "üîç Verificando se servi√ßo $SERVICE_NAME j√° existe..."
          if docker service ls --format '{{.Name}}' | grep -qx "$SERVICE_NAME"; then
            echo "üîÑ Servi√ßo j√° existe - executando UPDATE para nova imagem"
            timeout 60s docker service update \
              --image "$IMAGE" \
              --detach=false \
              --update-parallelism 1 \
              --update-delay 10s \
              "$SERVICE_NAME"
          else
            echo "üÜï Servi√ßo n√£o existe - executando CREATE"
            timeout 120s docker service create \
              --name "$SERVICE_NAME" \
              --image "$IMAGE" \
              --network "$NETWORK_NAME" \
              --detach=false \
              --publish ${PORT}:8085 \
              --secret source=REDIS_HOST,target=REDIS_HOST \
              --secret source=REDIS_PORT,target=REDIS_PORT \
              --secret source=REDIS_PASSWORD,target=REDIS_PASSWORD \
              --secret source=REDIS_DATABASE,target=REDIS_DATABASE \
              --secret source=JWT_SECRET,target=JWT_SECRET \
              --secret source=JWT_ISSUER,target=JWT_ISSUER \
              --env SPRING_PROFILES_ACTIVE=prod,azure \
              --env TZ=America/Sao_Paulo \
              --env SERVER_PORT=8085 \
              --env SPRING_DATA_REDIS_HOST="${REDIS_HOST:-}" \
              --env SPRING_DATA_REDIS_PORT="${REDIS_PORT:-6379}" \
              --env SPRING_DATA_REDIS_DATABASE="${REDIS_DATABASE:-1}" \
              --env JWT_ISSUER="${JWT_ISSUER:-}" \
              --env CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS:-}" \
              --env CORS_ALLOW_CREDENTIALS="${CORS_ALLOW_CREDENTIALS:-true}" \
              --env AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
              --env AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
              --env AZURE_KEYVAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" \
              --env AZURE_KEYVAULT_ENABLED=true \
              "$SERVICE_NAME"
          fi

          # Verificar se deploy foi bem-sucedido
          echo "‚úÖ Verificando sa√∫de do servi√ßo..."
          sleep 10
          REPLICAS=$(docker service ls --filter name="$SERVICE_NAME" --format '{{.Replicas}}' | head -1 || echo "")
          if echo "$REPLICAS" | grep -q "1/1"; then
            echo "‚úÖ Deploy bem-sucedido!"
          else
            echo "‚ùå Falha no deploy - verificar logs"
            docker service logs "$SERVICE_NAME" --tail 50 || true
            exit 1
          fi

      - name: Aguardar Auditoria Compliance estar pronto
        run: |
          echo "‚è≥ Aguardando Auditoria Compliance ficar pronto..."
          TIMEOUT=180
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker service ls | grep -q "auditoria-compliance.*1/1"; then
              echo "‚úÖ Auditoria Compliance est√° pronto!"
              break
            fi
            echo "‚è≥ Aguardando readiness... ($ELAPSED/$TIMEOUT segundos)"
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "‚ùå Auditoria Compliance n√£o ficou pronto em $TIMEOUT segundos"
            echo "üìã Status dos servi√ßos:"
            docker service ls | grep auditoria-compliance || true
            echo "üìã Logs do Auditoria Compliance:"
            docker service logs conexao-auditoria-compliance_auditoria-compliance --tail 50 || true
            exit 1
          fi

      - name: Health‚Äëcheck Auditoria Compliance
        run: |
          echo "üîç Verificando sa√∫de do Auditoria Compliance..."
          docker service ls | grep auditoria-compliance
          
          # Teste do endpoint de health
          SERVICE_CONTAINER=$(docker ps --filter "name=auditoria-compliance" --format "{{.Names}}" | head -1 || echo "")
          if [ -n "$SERVICE_CONTAINER" ]; then
            echo "üåê Testando health endpoint..."
            docker exec "$SERVICE_CONTAINER" curl -f http://localhost:8085/actuator/health 2>/dev/null && echo "‚úÖ Auditoria Compliance health OK" || echo "‚ö†Ô∏è Auditoria Compliance health test failed"
          fi
          
          echo "üéâ Auditoria Compliance microservice deployment completed successfully!"
          echo "üåê API: https://auditoria-compliance.conexaodesorte.com.br"

# ----------------------------------------------------------------------
# JOB 5 ‚ñ∏ NOTIFY
# ----------------------------------------------------------------------

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test-scan, deploy-selfhosted ]
    steps:
      - name: Slack notify
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RESULT: ${{ needs.deploy-selfhosted.result }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "‚ÑπÔ∏è Slack webhook n√£o configurado; etapa ignorada" && exit 0
          fi
          COLOR=good && [ "$RESULT" != "success" ] && COLOR=danger
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"Auditoria Compliance ‚Äì $RESULT\",\"attachments\":[{\"color\":\"$COLOR\"}]}" \
               "$WEBHOOK"
