# ============================================================================
# üê≥ DOCKERFILE MULTI-EST√ÅGIO - MICROSERVI√áO AUDITORIA & COMPLIANCE
# ============================================================================
#
# Dockerfile otimizado para microservi√ßo reativo com:
# - Multi-stage build para reduzir tamanho da imagem
# - Java 25 com Amazon Corretto (otimizado pela AWS para produ√ß√£o)
# - Usu√°rio n√£o-root para seguran√ßa
# - Health check nativo
# - Otimiza√ß√µes de performance
# - Sem hardcoded secrets (usa external secrets)
#
# Build: docker build -t conexaodesorte/auditoria:latest .
# Run: docker run -p 8085:8085 conexaodesorte/auditoria:latest
#
# @author Sistema de Migra√ß√£o R2DBC
# @version 1.0
# @since 2024
# ============================================================================

# === EST√ÅGIO 1: BUILD ===
FROM amazoncorretto:25-alpine3.22 AS builder

# Instalar Maven
ENV MAVEN_VERSION=3.9.11
ENV MAVEN_HOME=/opt/maven
ENV PATH=$MAVEN_HOME/bin:$PATH

RUN apk add --no-cache wget bash && \
    wget -q https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    tar -xzf apache-maven-$MAVEN_VERSION-bin.tar.gz -C /opt && \
    mv /opt/apache-maven-$MAVEN_VERSION $MAVEN_HOME && \
    rm apache-maven-$MAVEN_VERSION-bin.tar.gz

# Metadados da imagem
LABEL maintainer="Conex√£o de Sorte <tech@conexaodesorte.com>"
LABEL description="Microservi√ßo de Auditoria e Compliance - Build Stage"
LABEL version="1.0.0"

# Instalar depend√™ncias necess√°rias
RUN apk add --no-cache \
    curl \
    git \
    && rm -rf /var/cache/apk/*

# Vari√°veis de build
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Definir diret√≥rio de trabalho
WORKDIR /build

# Copiar arquivos de configura√ß√£o Maven (cache layer)
COPY pom.xml .
COPY .mvn/ .mvn/
COPY mvnw .

# Download de depend√™ncias (layer cache√°vel) com timeout estendido
RUN --mount=type=cache,target=/root/.m2 \
    mvn dependency:go-offline -B \
    -Dmaven.wagon.http.connectionTimeout=300000 \
    -Dmaven.wagon.http.readTimeout=300000 \
    -Dmaven.wagon.rto=300000

# Copiar c√≥digo fonte
COPY src/ src/

# Build da aplica√ß√£o com otimiza√ß√µes e timeout estendido
RUN --mount=type=cache,target=/root/.m2 \
    mvn clean package -DskipTests -B \
    -Dspring-boot.build-image.pullPolicy=IF_NOT_PRESENT \
    -Dmaven.compiler.debug=false \
    -Dmaven.compiler.optimize=true \
    -Dmaven.wagon.http.connectionTimeout=300000 \
    -Dmaven.wagon.http.readTimeout=300000 \
    -Dmaven.wagon.rto=300000

# === EST√ÅGIO 2: RUNTIME ===
FROM amazoncorretto:25-alpine3.22 AS runtime

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    tzdata \
    curl \
    dumb-init \
    mysql-client \
    netcat-openbsd \
    && rm -rf /var/cache/apk/*

# Configurar timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Definir diret√≥rio da aplica√ß√£o
WORKDIR /app

# Copiar JAR da aplica√ß√£o do est√°gio de build
COPY --from=builder /build/target/*.jar app.jar

# Copiar script de inicializa√ß√£o do database
COPY --chown=appuser:appgroup scripts/init-database.sh /app/init-database.sh
RUN chmod +x /app/init-database.sh

# Script de entrada que executa inicializa√ß√£o do DB e depois a aplica√ß√£o
RUN printf '%s\n' '#!/bin/sh' \
    'set -e' \
    'echo "üöÄ Iniciando container auditoria-compliance..."' \
    '' \
    '# Executar inicializa√ß√£o do database' \
    'if [ -f /app/init-database.sh ]; then' \
    '    echo "üóÑÔ∏è Executando inicializa√ß√£o do database..."' \
    '    /app/init-database.sh' \
    'else' \
    '    echo "‚ö†Ô∏è Script de inicializa√ß√£o n√£o encontrado, prosseguindo..."' \
    'fi' \
    '' \
    '# Iniciar aplica√ß√£o Java' \
    'echo "‚òï Iniciando aplica√ß√£o Java..."' \
    'exec dumb-init -- java -jar /app/app.jar' \
    > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh && \
    chown appuser:appgroup /app/entrypoint.sh

# Preparar diret√≥rio de logs grav√°vel pelo app
RUN mkdir -p /app/logs

# Health check nativo
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8085/actuator/health || exit 1

# Mudar propriedades para o usu√°rio n√£o-root
RUN chown -R appuser:appgroup /app

# Mudar para usu√°rio n√£o-root
USER appuser:appgroup

# Labels para metadata
LABEL org.opencontainers.image.title="Conex√£o de Sorte - Auditoria"
LABEL org.opencontainers.image.description="Microservi√ßo de Auditoria e Compliance"
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${VCS_REF}
LABEL org.opencontainers.image.vendor="Conex√£o de Sorte"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.url="https://conexaodesorte.com"
LABEL org.opencontainers.image.source="https://github.com/conexaodesorte/auditoria-compliance"

ENTRYPOINT ["/app/entrypoint.sh"]

# === EST√ÅGIO 3: DEBUG (Opcional) ===
FROM runtime AS debug

# Configurar debug remoto
ENV JAVA_OPTS="$JAVA_OPTS \
    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 \
    -Dspring.profiles.active=dev \
    -Dlogging.level.br.tec.facilitaservicos=DEBUG"

# Expor porta de debug
EXPOSE 5005

# Comando para debug
CMD ["sh", "-c", "echo 'Starting in DEBUG mode on port 5005' && java $JAVA_OPTS -jar app.jar"]

# === EST√ÅGIO FINAL: RELEASE (Padr√£o) ===
# Garante que o build padr√£o (sem --target) produza a imagem de runtime
FROM runtime AS release
ENTRYPOINT ["dumb-init", "--", "java"]
CMD ["-jar", "app.jar"]
