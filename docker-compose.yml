# ============================================================================
# üê≥ DOCKER COMPOSE - MICROSERVI√áO AUDITORIA & COMPLIANCE
# ============================================================================
#
# Microservi√ßo refatorado para usar infraestrutura compartilhada:
# ‚úÖ Conecta ao Redis do infraestrutura-core (conexao-redis)
# ‚úÖ Conecta ao Kafka do infraestrutura-core (conexao-kafka)
# ‚úÖ Usa network compartilhada (conexao-network-swarm)
# ‚úÖ Segredos via external secrets (sem hardcode)
# ‚úÖ Apenas MySQL pr√≥prio (dados espec√≠ficos de auditoria)
#
# Execu√ß√£o:
# docker-compose up -d          # Subir apenas o microservi√ßo
# docker-compose logs -f        # Ver logs em tempo real
# docker-compose down           # Parar apenas o microservi√ßo
#
# ‚ö†Ô∏è IMPORTANTE: Execute primeiro o infraestrutura-core
#
# @author Sistema de Migra√ß√£o Refatorado
# @version 2.0 - Refatorado para infraestrutura compartilhada
# @since 2024
# ============================================================================

services:
  # === MICROSERVI√áO DE AUDITORIA ===
  auditoria-service:
    image: conexaodesorte/auditoria:latest
    restart: unless-stopped
    environment:
      # Database (infraestrutura centralizada)
      - DB_HOST=conexao-mysql
      - DB_PORT=3306
      - DB_NAME=conexao_audit
      - DB_USERNAME=${DATABASE_USERNAME}
      - DB_PASSWORD=${DATABASE_PASSWORD}

      # Redis (usa infraestrutura-core)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE}

      # Kafka (usa infraestrutura-core)
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-conexao-kafka:9092}
      - KAFKA_GROUP_ID=auditoria-service

      # JWT (external secrets)
      - JWT_JWKS_URI=${JWT_JWKS_URI}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_SIGNING_KEY=${JWT_SIGNING_KEY}
      - JWT_VERIFICATION_KEY=${JWT_VERIFICATION_KEY}

      # Features
      - FEATURE_AUDITORIA_MS=true
      - FEATURE_EVENT_STREAMING=true
      - FEATURE_CACHE_ENABLED=true

      # Observabilidade
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus,metrics
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://conexao-zipkin:9411/api/v2/spans
      - MANAGEMENT_JAEGER_TRACING_ENDPOINT=http://conexao-jaeger:14268/api/traces

      # Sistema
      - SPRING_PROFILES_ACTIVE=docker
      - TZ=America/Sao_Paulo
      - SERVER_PORT=8093

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - conexao-network-swarm  # ‚úÖ Conecta √† rede compartilhada
    volumes:
      - auditoria-logs:/app/logs
      - auditoria-tmp:/tmp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s

    # ==========================================================================
    # üè∑Ô∏è TRAEFIK LABELS - AUDITORIA-COMPLIANCE SERVICE
    # ==========================================================================
    labels:
      # Habilitar Traefik para este servi√ßo
      - "traefik.enable=true"
      - "traefik.docker.network=conexao-network-swarm"

      # Configura√ß√£o do servi√ßo Auditoria-Compliance
      - "traefik.http.services.auditoria-compliance-service.loadbalancer.server.port=8093"
      - "traefik.http.services.auditoria-compliance-service.loadbalancer.healthcheck.path=/actuator/health"
      - "traefik.http.services.auditoria-compliance-service.loadbalancer.healthcheck.interval=30s"

      # Health check individual do Auditoria-Compliance
      - "traefik.http.routers.auditoria-compliance-health.rule=Host(`traefik.conexaodesorte.com.br`) && PathPrefix(`/health/service/auditoria-compliance`)"
      - "traefik.http.routers.auditoria-compliance-health.entrypoints=websecure"
      - "traefik.http.routers.auditoria-compliance-health.tls.certresolver=letsencrypt"
      - "traefik.http.routers.auditoria-compliance-health.service=auditoria-compliance-service"
      - "traefik.http.routers.auditoria-compliance-health.middlewares=auditoria-compliance-health-rewrite"

      # Middleware para reescrever path do health check
      - "traefik.http.middlewares.auditoria-compliance-health-rewrite.replacepath.path=/actuator/health"

      # Metadata do servi√ßo
      - "org.opencontainers.image.title=Conex√£o de Sorte - Auditoria & Compliance"
      - "org.opencontainers.image.description=Microservi√ßo de auditoria, logs e compliance"
      - "org.opencontainers.image.version=1.0.0"
      - "microservice.type=audit"
      - "microservice.category=compliance"

  # === OBSERVA√á√ÉO: MySQL removido - usa infraestrutura centralizada ===
  # MySQL agora fornecido pelo conexao-de-sorte-infraestrutura-core
  # Database: conexao_audit no servidor conexao-mysql

  # === OBSERVA√á√ÉO: Observabilidade removida - usa backend-observabilidade ===
  # Prometheus e Grafana agora fornecidos pelo conexao-de-sorte-backend-observabilidade
  # M√©tricas centralizadas em uma √∫nica stack de observabilidade

# === VOLUMES (apenas dados espec√≠ficos) ===
volumes:
  auditoria-logs:
  auditoria-tmp:

# === NETWORKS ===
networks:
  # Rede externa compartilhada (criada pelo infraestrutura-core)
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true