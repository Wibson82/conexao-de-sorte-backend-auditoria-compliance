# ============================================================================
# üê≥ DOCKER COMPOSE - MICROSERVI√áO AUDITORIA & COMPLIANCE
# ============================================================================
#
# Microservi√ßo refatorado para usar infraestrutura compartilhada:
# ‚úÖ Conecta ao Redis do infraestrutura-core (conexao-redis)
# ‚úÖ Conecta ao Kafka do infraestrutura-core (conexao-kafka)
# ‚úÖ Usa network compartilhada (conexao-network-swarm)
# ‚úÖ Segredos via Azure Key Vault (sem hardcode)
# ‚úÖ Apenas MySQL pr√≥prio (dados espec√≠ficos de auditoria)
#
# Execu√ß√£o:
# docker-compose up -d          # Subir apenas o microservi√ßo
# docker-compose logs -f        # Ver logs em tempo real
# docker-compose down           # Parar apenas o microservi√ßo
#
# ‚ö†Ô∏è IMPORTANTE: Execute primeiro o infraestrutura-core
#
# @author Sistema de Migra√ß√£o Refatorado
# @version 2.0 - Refatorado para infraestrutura compartilhada
# @since 2024
# ============================================================================

services:
  # === MICROSERVI√áO DE AUDITORIA ===
  auditoria-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: release
    image: conexaodesorte/auditoria:latest
    container_name: auditoria-service
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      # Database (infraestrutura centralizada)
      - DB_HOST=conexao-mysql
      - DB_PORT=3306
      - DB_NAME=conexao_audit
      - DB_USERNAME=${DATABASE_USERNAME:-audit_user}
      - DB_PASSWORD=${DATABASE_PASSWORD:-audit_pass123!}
      
      # Redis (usa infraestrutura-core)
      - REDIS_HOST=${REDIS_HOST:-conexao-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE:-5}
      
      # Kafka (usa infraestrutura-core)  
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-conexao-kafka:9092}
      - KAFKA_GROUP_ID=auditoria-service
      
      # JWT (padr√£o SEGREDOS_PADRONIZADOS.md)
      - JWT_JWKS_URI=${JWT_JWKS_URI:-https://auth.conexaodesorte.com.br/.well-known/jwks.json}
      - JWT_ISSUER=${JWT_ISSUER:-https://auth.conexaodesorte.com.br}
      - JWT_SECRET=${JWT_SECRET}
      
      # Features
      - FEATURE_AUDITORIA_MS=true
      - FEATURE_EVENT_STREAMING=true
      - FEATURE_CACHE_ENABLED=true
      
      # Observabilidade
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus,metrics
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://conexao-zipkin:9411/api/v2/spans
      - MANAGEMENT_JAEGER_TRACING_ENDPOINT=http://conexao-jaeger:14268/api/traces
      
      # Sistema
      - SPRING_PROFILES_ACTIVE=docker
      - TZ=America/Sao_Paulo
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - conexao-network-swarm  # ‚úÖ Conecta √† rede compartilhada
    volumes:
      - auditoria-logs:/app/logs
      - auditoria-tmp:/tmp

  # === OBSERVA√á√ÉO: MySQL removido - usa infraestrutura centralizada ===
  # MySQL agora fornecido pelo conexao-de-sorte-infraestrutura-core
  # Database: conexao_audit no servidor conexao-mysql

  # === OBSERVA√á√ÉO: Observabilidade removida - usa backend-observabilidade ===
  # Prometheus e Grafana agora fornecidos pelo conexao-de-sorte-backend-observabilidade
  # M√©tricas centralizadas em uma √∫nica stack de observabilidade

# === VOLUMES (apenas dados espec√≠ficos) ===
volumes:
  auditoria-logs:
    driver: local
  auditoria-tmp:
    driver: local

# === NETWORKS ===
networks:
  # Rede externa compartilhada (criada pelo infraestrutura-core)
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true