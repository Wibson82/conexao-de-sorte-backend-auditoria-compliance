# ============================================================================
# üê≥ DOCKER COMPOSE - MICROSERVI√áO AUDITORIA & COMPLIANCE
# ============================================================================
#
# Microservi√ßo refatorado para usar infraestrutura compartilhada:
# ‚úÖ Conecta ao Redis do infraestrutura-core (conexao-redis)
# ‚úÖ Conecta ao Kafka do infraestrutura-core (conexao-kafka)
# ‚úÖ Usa network compartilhada (conexao-network-swarm)
# ‚úÖ Segredos via Azure Key Vault (sem hardcode)
# ‚úÖ Apenas MySQL pr√≥prio (dados espec√≠ficos de auditoria)
#
# Execu√ß√£o:
# docker-compose up -d          # Subir apenas o microservi√ßo
# docker-compose logs -f        # Ver logs em tempo real
# docker-compose down           # Parar apenas o microservi√ßo
#
# ‚ö†Ô∏è IMPORTANTE: Execute primeiro o infraestrutura-core
#
# @author Sistema de Migra√ß√£o Refatorado
# @version 2.0 - Refatorado para infraestrutura compartilhada
# @since 2024
# ============================================================================

services:
  # === MICROSERVI√áO DE AUDITORIA ===
  auditoria-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: release
    image: conexaodesorte/auditoria:latest
    container_name: auditoria-service
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      # Database (pr√≥prio do microservi√ßo)
      - DB_HOST=auditoria-mysql
      - DB_PORT=3306
      - DB_NAME=conexao_sorte_audit
      - DB_USERNAME=${DATABASE_USERNAME:-audit_user}
      - DB_PASSWORD=${DATABASE_PASSWORD:-audit_pass123!}
      
      # Redis (usa infraestrutura-core)
      - REDIS_HOST=${REDIS_HOST:-conexao-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE:-5}
      
      # Kafka (usa infraestrutura-core)  
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-conexao-kafka:9092}
      - KAFKA_GROUP_ID=auditoria-service
      
      # JWT (padr√£o SEGREDOS_PADRONIZADOS.md)
      - JWT_JWKS_URI=${JWT_JWKS_URI:-https://auth.conexaodesorte.com.br/.well-known/jwks.json}
      - JWT_ISSUER=${JWT_ISSUER:-https://auth.conexaodesorte.com.br}
      - JWT_SECRET=${JWT_SECRET}
      
      # Features
      - FEATURE_AUDITORIA_MS=true
      - FEATURE_EVENT_STREAMING=true
      - FEATURE_CACHE_ENABLED=true
      
      # Observabilidade
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus,metrics
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://conexao-zipkin:9411/api/v2/spans
      - MANAGEMENT_JAEGER_TRACING_ENDPOINT=http://conexao-jaeger:14268/api/traces
      
      # Sistema
      - SPRING_PROFILES_ACTIVE=docker
      - TZ=America/Sao_Paulo
      
    depends_on:
      auditoria-mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - conexao-network-swarm  # ‚úÖ Conecta √† rede compartilhada
      - auditoria-internal     # Rede interna apenas para MySQL
    volumes:
      - auditoria-logs:/app/logs
      - auditoria-tmp:/tmp

  # === MYSQL 8.4 (apenas dados espec√≠ficos de auditoria) ===
  auditoria-mysql:
    image: mysql:8.4
    container_name: auditoria-mysql
    restart: unless-stopped
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD:-root_pass123!}
      - MYSQL_DATABASE=conexao_sorte_audit
      - MYSQL_USER=${DATABASE_USERNAME:-audit_user}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD:-audit_pass123!}
      - TZ=America/Sao_Paulo
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-time-zone='-03:00'
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200
      --general-log=1
      --general-log-file=/var/lib/mysql/general.log
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow-query.log
      --long-query-time=2
    volumes:
      - auditoria-mysql-data:/var/lib/mysql
      - auditoria-mysql-logs:/var/log/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - auditoria-internal

  # === PROMETHEUS (observabilidade espec√≠fica) ===
  auditoria-prometheus:
    image: prom/prometheus:latest
    container_name: auditoria-prometheus
    restart: unless-stopped
    ports:
      - "9093:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - auditoria-prometheus-data:/prometheus
    networks:
      - auditoria-internal
      - conexao-network-swarm  # Para conectar com Zipkin/Jaeger

  # === GRAFANA (dashboards espec√≠ficos) ===
  auditoria-grafana:
    image: grafana/grafana:latest
    container_name: auditoria-grafana
    restart: unless-stopped
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - auditoria-grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - auditoria-prometheus
    networks:
      - auditoria-internal

# === VOLUMES (apenas dados espec√≠ficos) ===
volumes:
  auditoria-mysql-data:
    driver: local
  auditoria-mysql-logs:
    driver: local
  auditoria-prometheus-data:
    driver: local
  auditoria-grafana-data:
    driver: local
  auditoria-logs:
    driver: local
  auditoria-tmp:
    driver: local

# === NETWORKS ===
networks:
  # Rede externa compartilhada (criada pelo infraestrutura-core)
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true
    
  # Rede interna apenas para componentes espec√≠ficos
  auditoria-internal:
    driver: bridge
    name: auditoria-internal